
main.o:     file format elf32-i386
main.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000051  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000085  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000085  2**0
                  ALLOC
  3 .rodata       00000016  00000000  00000000  00000085  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   00000053  00000000  00000000  0000009b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 0000004a  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_line   0000005e  00000000  00000000  00000158  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  8 .debug_str    000000ef  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY
 10 .note.GNU-stack 00000000  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
 11 .note.gnu.property 0000001c  00000000  00000000  000002d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .eh_frame     0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 main.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .note.gnu.property	00000000 .note.gnu.property
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 g     F .text	00000051 main
00000000         *UND*	00000000 setAttribute
00000000         *UND*	00000000 puts



Disassembly of section .text:

00000000 <main>:

#include "../inc/stdio.h"

void main(){
   0:	f3 0f 1e fb          	endbr32 
   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   8:	83 e4 f0             	and    $0xfffffff0,%esp
   b:	ff 71 fc             	pushl  -0x4(%ecx)
   e:	55                   	push   %ebp
   f:	89 e5                	mov    %esp,%ebp
  11:	51                   	push   %ecx
  12:	83 ec 14             	sub    $0x14,%esp

    //clearScreen();

    setAttribute(0x0F);
  15:	83 ec 0c             	sub    $0xc,%esp
  18:	6a 0f                	push   $0xf
  1a:	e8 fc ff ff ff       	call   1b <main+0x1b>
			1b: R_386_PC32	setAttribute
  1f:	83 c4 10             	add    $0x10,%esp
    puts("Print String working\n");
  22:	83 ec 0c             	sub    $0xc,%esp
  25:	68 00 00 00 00       	push   $0x0
			26: R_386_32	.rodata
  2a:	e8 fc ff ff ff       	call   2b <main+0x2b>
			2b: R_386_PC32	puts
  2f:	83 c4 10             	add    $0x10,%esp
    unsigned char byte = 0;
  32:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    while(1){
        *((unsigned short *) 0xb8000) = (0x0F << 8) + byte++;
  36:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  3a:	8d 50 01             	lea    0x1(%eax),%edx
  3d:	88 55 f7             	mov    %dl,-0x9(%ebp)
  40:	0f b6 c0             	movzbl %al,%eax
  43:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  48:	66 05 00 0f          	add    $0xf00,%ax
  4c:	66 89 02             	mov    %ax,(%edx)
  4f:	eb e5                	jmp    36 <main+0x36>
